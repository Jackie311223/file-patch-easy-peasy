// File: prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"] // Tùy chọn cho các phiên bản Prisma cũ hơn
}

// --- Enums ---
enum Role {
  SUPER_ADMIN
  ADMIN
  PARTNER
  STAFF
  USER
}

enum BookingStatusType {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum PaymentStatusType {
  PENDING
  PAID
  UNPAID
  PARTIALLY_PAID
  REFUNDED
}

enum PaymentMethodType {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  MOMO
  ZALOPAY
  VNPAY
  NINEPAY // Đã đổi tên từ 9PAY
  ONEPAY
  OTA_TRANSFER
  BANK_PERSONAL
  OTHER
}

enum PaymentTypeValue {
  HOTEL_COLLECT
  OTA_COLLECT
}

enum InvoiceStatusType {
  DRAFT
  SENT
  PAID
  VOID
  OVERDUE
}

// --- Models ---
model Tenant {
  id         String     @id @default(cuid())
  name       String
  slug       String     @unique
  address    String?
  phone      String?
  email      String?    @unique
  website    String?
  settings   Json?

  users      User[]
  properties Property[]
  roomTypes  RoomType[] @relation("TenantRoomTypes")
  bookings   Booking[]
  payments   Payment[]
  invoices   Invoice[]
  auditLogs  AuditLog[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String?
  phone             String?   @unique
  avatarUrl         String?
  isActive          Boolean   @default(true)
  roles             Role[]    // Sử dụng enum Role
  lastLogin         DateTime?
  
  tenantId          String?
  tenant            Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  properties        Property[]
  bookings          Booking[]  @relation("UserBookings")
  paymentsCollected Payment[] @relation("CollectedBy")
  auditLogs         AuditLog[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Property {
  id            String   @id @default(cuid())
  name          String
  address       String?
  city          String?
  country       String?
  description   String?
  amenities     String[] 
  images        String[] 
  
  userId        String   
  user          User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  roomTypes     RoomType[] @relation("PropertyRoomTypes")
  bookings      Booking[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RoomType {
  id             String    @id @default(cuid())
  name           String    
  description    String?
  basePrice      Float     
  maxOccupancy   Int       
  amenities      String[]  
  images         String[]  

  propertyId     String
  property       Property  @relation("PropertyRoomTypes", fields: [propertyId], references: [id], onDelete: Cascade)
  
  tenantId       String    
  tenant         Tenant    @relation("TenantRoomTypes", fields: [tenantId], references: [id], onDelete: Cascade) 
  // Quan hệ với Tenant ở đây có thể thừa nếu đã có qua Property, trừ khi RoomType có thể tồn tại độc lập với Property nhưng vẫn thuộc Tenant.
  // Nếu RoomType luôn thuộc về một Property (và Property đó thuộc về Tenant), thì tenantId/tenant ở đây có thể không cần thiết.
  // Tuy nhiên, để nó ở đây cũng không sai nếu bạn muốn query RoomType trực tiếp theo Tenant.

  rooms          Room[]    
  bookings       Booking[] 

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Room {
  id             String   @id @default(cuid())
  roomNumber     String   
  status         String   // Nên dùng enum: AVAILABLE, OCCUPIED, MAINTENANCE, CLEANING 
  notes          String?

  roomTypeId     String
  roomType       RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Restrict)

  bookings       Booking[] @relation("RoomBookings") 

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([roomTypeId, roomNumber]) 
}

model Booking {
  id                   String    @id @default(cuid())
  bookingCode          String    @unique @default(cuid()) 
  guestName            String
  guestEmail           String?
  contactPhone         String?
  channel              String?   
  checkIn              DateTime
  checkOut             DateTime
  nights               Int       
  adults               Int
  children             Int?      @default(0)
  totalAmount          Float     
  netRevenue           Float?    
  outstandingBalance   Float     @default(0) 
  currency             String    @default("VND")
  paymentMethod        PaymentMethodType? 
  paymentStatus        PaymentStatusType? @default(PENDING) 
  amountPaid           Float     @default(0)
  bookingStatus        BookingStatusType  @default(PENDING) 
  notes                String?
  isVIP                Boolean?  @default(false)

  propertyId           String
  property             Property  @relation(fields: [propertyId], references: [id], onDelete: Restrict) 

  roomTypeId           String?   
  roomType             RoomType? @relation(fields: [roomTypeId], references: [id], onDelete: SetNull)
  
  roomId               String?   
  room                 Room?     @relation("RoomBookings", fields: [roomId], references: [id], onDelete: SetNull)

  userId               String?   
  user                 User?     @relation("UserBookings", fields: [userId], references: [id], onDelete: SetNull)
  tenantId             String
  tenant               Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  payments             Payment[]
  invoices             Invoice[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([propertyId, checkIn, checkOut])
  @@index([bookingStatus])
  @@index([paymentStatus])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  paymentDate   DateTime
  paymentType   PaymentTypeValue 
  method        PaymentMethodType  
  status        PaymentStatusType  
  transactionId String?  @unique 
  notes         String?
  receivedFrom  String?  

  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  collectedById String?  
  collectedBy   User?    @relation("CollectedBy", fields: [collectedById], references: [id], onDelete: SetNull)

  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  invoiceId     String?
  invoice       Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique 
  status        InvoiceStatusType @default(DRAFT) 
  issueDate     DateTime @default(now())
  dueDate       DateTime
  totalAmount   Float    
  notes         String?
  guestName     String?
  guestAddress  String?
  guestEmail    String?
  guestPhone    String?

  bookingId     String?  
  booking       Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  payments      Payment[] 

  // invoiceItems InvoiceItem[] // Bỏ comment nếu bạn có model InvoiceItem

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, status])
  @@index([bookingId])
}

// model InvoiceItem {
//   id String @id @default(cuid())
//   description String
//   quantity Int
//   unitPrice Float
//   amount Float // quantity * unitPrice
//   invoiceId String
//   invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model AuditLog {
  id         String   @id @default(cuid())
  action     String   
  resource   String   
  resourceId String?  
  metadata   Json?    
  userId     String   
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  timestamp  DateTime @default(now())
}